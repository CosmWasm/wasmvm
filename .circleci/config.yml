version: 2.1

jobs:
  # All checks on the codebase that can run in parallel to build_shared_library
  libwasmvm_sanity:
    docker:
      - image: cimg/rust:1.59.0
    steps:
      - checkout
      - run:
          name: Show Rust version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Add Rust components
          command: rustup component add clippy rustfmt
      - restore_cache:
          keys:
            - cargocache-v3-libwasmvm_sanity-rust:1.59.0-{{ checksum "libwasmvm/Cargo.lock" }}
      - run:
          name: Check Rust formatting
          working_directory: libwasmvm
          command: cargo fmt -- --check
      - run:
          name: Run linter
          working_directory: libwasmvm
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Run unit tests
          working_directory: libwasmvm
          command: cargo test
      - run:
          name: Build docs
          working_directory: libwasmvm
          command: cargo doc --no-deps
      - run:
          name: Test docs
          working_directory: libwasmvm
          command: |
            sed -i  '/^crate-type = \["cdylib"\]/d' Cargo.toml
            cargo test --doc
      - save_cache:
          paths:
            - ~/.cargo/registry
            - libwasmvm/target/debug/.fingerprint
            - libwasmvm/target/debug/build
            - libwasmvm/target/debug/deps
            - libwasmvm/target/release/.fingerprint
            - libwasmvm/target/release/build
            - libwasmvm/target/release/deps
          key: cargocache-v3-libwasmvm_sanity-rust:1.59.0-{{ checksum "libwasmvm/Cargo.lock" }}

  libwasmvm_audit:
    docker:
      # Note: the audit tool uses a more modern Rust version than the build jobs
      - image: cimg/rust:1.58.1
    steps:
      - checkout
      - run:
          name: Install OpenSSL
          command: |
            sudo apt update
            sudo apt install libssl-dev
      - run:
          name: Show Rust version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v3-libwasmvm_audit-rust:1.58.1-{{ checksum "libwasmvm/Cargo.lock" }}
      - run:
          name: Install cargo-audit
          command: cargo install --debug cargo-audit --version 0.16.0
      - run:
          name: Run cargo-audit
          working_directory: libwasmvm
          command: cargo audit
      - save_cache:
          paths:
            - ~/.cargo/registry
          key: cargocache-v3-libwasmvm_audit-rust:1.58.1-{{ checksum "libwasmvm/Cargo.lock" }}

  format-go:
    docker:
      - image: cimg/go:1.17.4
    steps:
      - checkout
      - run:
          name: Check Go formatting
          command: |
            [ "$(gofmt -l .)" = "" ] || (gofmt -d . && exit 1)

  tidy-go:
    docker:
      - image: cimg/go:1.17.4
    steps:
      - checkout
      - run:
          name: Check go mod tidy
          # Use --check or --exit-code when available (Go 1.19?)
          # https://github.com/golang/go/issues/27005
          command: |
            go mod tidy
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi

  format-scripts:
    docker:
      - image: cimg/go:1.17.4
    steps:
      - run:
          name: Install shfmt
          command: GO111MODULE=on go install mvdan.cc/sh/v3/cmd/shfmt@v3.4.0
      - checkout
      - run:
          name: Run shfmt
          command: shfmt -d .

  lint-scripts:
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: Install packages
          command: |
            apt update
            apt install -y git shellcheck
      - checkout
      - run:
          name: Run shellcheck
          command: find . -name "*.sh" -exec shellcheck {} +

  build_shared_library:
    docker:
      - image: cimg/rust:1.59.0
    steps:
      - checkout
      - run:
          name: Show version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v3-build_shared_library-rust:1.59.0-{{ checksum "libwasmvm/Cargo.lock" }}
      - run:
          name: Create release build of libwasmvm
          command: make build-rust
      - persist_to_workspace:
          root: ./api
          paths:
            - libwasmvm.x86_64.so
      - save_cache:
          paths:
            - ~/.cargo/registry
            - libwasmvm/target/debug/.fingerprint
            - libwasmvm/target/debug/build
            - libwasmvm/target/debug/deps
            - libwasmvm/target/release/.fingerprint
            - libwasmvm/target/release/build
            - libwasmvm/target/release/deps
          key: cargocache-v3-build_shared_library-rust:1.59.0-{{ checksum "libwasmvm/Cargo.lock" }}

  test:
    docker:
      - image: cimg/go:1.17.4
    environment:
      GORACE: "halt_on_error=1"
      BUILD_VERSION: $(echo ${CIRCLE_SHA1} | cut -c 1-10)
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/builds
      - run:
          name: Copy .so build
          command: cp /tmp/builds/libwasmvm.x86_64.so ./api
      - run:
          name: Go integration tests
          command: make test
      - run:
          name: Go tests with cgo and race condition safety checks
          command: make test-safety
      - run: make build-go

  test_alpine_build:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - run: make test-alpine
      - run:
          name: Debug build results
          command: ls -l ./api

  deploy_to_git:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: xlarge
    steps:
      - add_ssh_keys:
          fingerprints:
            # Custom read/write deployment key with private key stored on CircleCI
            # (see https://app.circleci.com/settings/project/github/CosmWasm/wasmvm/ssh and https://github.com/CosmWasm/wasmvm/settings/keys)
            - "31:de:e5:84:1b:12:81:94:aa:06:50:c0:cb:bd:79:f0"
      - checkout
      - run:
          name: Build shared library for Linux
          command: make release-build-linux
      - run:
          name: Build shared library for macOS
          command: make release-build-macos
      - run:
          name: Debug build results
          command: ls -l ./api
      - run:
          name: Configure git user
          # This is not a GitHub user and no permissions can be configured other than "push access", which
          # we can configure for Deploy keys at https://github.com/CosmWasm/wasmvm/settings/keys
          command: |
            git config user.email "wasmvm@circleci.confio.example.com"
            git config user.name "Deployer"
      - run:
          name: Check-in and push new libraries
          command: |
            git status
            git add ./api
            git commit --allow-empty -m '[skip ci] Built release libraries'
            git push origin $CIRCLE_BRANCH

  build_static_lib:
    machine:
      image: ubuntu-2004:2022.10.1
    resource_class: xlarge
    steps:
      - run:
          name: Check Go version # needed for ghr installation
          command: go version
      - run:
          name: Install ghr
          command: |
            go install github.com/tcnksm/ghr@v0.16.0
            ghr --version
      - checkout
      - run:
          name: Build static library for Alpine
          command: make release-build-alpine
      - run:
          name: Debug build results
          command: ls -l ./api
      - run:
          name: Collect artifacts
          command: |
            mkdir artifacts
            cp ./api/libwasmvm_muslc.a artifacts/libwasmvm_muslc.x86_64.a
            cp ./api/libwasmvm_muslc.aarch64.a artifacts/libwasmvm_muslc.aarch64.a
      - run:
          name: Create checksums
          working_directory: artifacts
          command: sha256sum * > checksums.txt && cat checksums.txt
      - store_artifacts:
          path: artifacts
      # Deploy to GitHub releases on tag builds
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Publish artifacts on GitHub
                command: |
                  TAG="$CIRCLE_TAG"
                  TITLE="$TAG"
                  BODY="Build artifacts generated at this tag."
                  ghr -t "$GITHUB_TOKEN" \
                    -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
                    -c "$CIRCLE_SHA1" \
                    -n "$TITLE" -b "$BODY" \
                    -delete \
                    "$TAG" ./artifacts/

workflows:
  version: 2
  build_and_test:
    jobs:
      - libwasmvm_sanity
      - libwasmvm_audit
      - format-go
      - tidy-go
      - format-scripts
      - lint-scripts
      - build_shared_library:
          filters: # required since other jobs with tag filters require this one
            tags:
              only: /.*/
      - test:
          requires:
            - build_shared_library
      - build_static_lib:
          requires:
            - build_shared_library
          filters:
            # tags and branches are OR combined
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              only:
                # long living branches
                - main
                - 0.14-dev
      # This is long running, so only double-check on merge commits
      # ensures that all code works on alpine linux
      - test_alpine_build:
          filters:
            tags:
              ignore:
                - /.*/
            branches:
              only:
                # long living branches
                - main
                - 0.14-dev
      # Run only on main, not on tags (auto-build on merge PR)
      - deploy_to_git:
          requires:
            - libwasmvm_sanity
            - format-go
            - tidy-go
            - format-scripts
            - lint-scripts
            - test
          filters:
            tags:
              ignore:
                - /.*/
            branches:
              only:
                - main
                - /^release\/.*/
