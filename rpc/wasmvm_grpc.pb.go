// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: wasmvm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WasmVMService_LoadModule_FullMethodName             = "/cosmwasm.WasmVMService/LoadModule"
	WasmVMService_RemoveModule_FullMethodName           = "/cosmwasm.WasmVMService/RemoveModule"
	WasmVMService_PinModule_FullMethodName              = "/cosmwasm.WasmVMService/PinModule"
	WasmVMService_UnpinModule_FullMethodName            = "/cosmwasm.WasmVMService/UnpinModule"
	WasmVMService_GetCode_FullMethodName                = "/cosmwasm.WasmVMService/GetCode"
	WasmVMService_Instantiate_FullMethodName            = "/cosmwasm.WasmVMService/Instantiate"
	WasmVMService_Execute_FullMethodName                = "/cosmwasm.WasmVMService/Execute"
	WasmVMService_Query_FullMethodName                  = "/cosmwasm.WasmVMService/Query"
	WasmVMService_Migrate_FullMethodName                = "/cosmwasm.WasmVMService/Migrate"
	WasmVMService_Sudo_FullMethodName                   = "/cosmwasm.WasmVMService/Sudo"
	WasmVMService_Reply_FullMethodName                  = "/cosmwasm.WasmVMService/Reply"
	WasmVMService_InstantiateWithStorage_FullMethodName = "/cosmwasm.WasmVMService/InstantiateWithStorage"
	WasmVMService_ExecuteWithStorage_FullMethodName     = "/cosmwasm.WasmVMService/ExecuteWithStorage"
	WasmVMService_QueryWithStorage_FullMethodName       = "/cosmwasm.WasmVMService/QueryWithStorage"
	WasmVMService_MigrateWithStorage_FullMethodName     = "/cosmwasm.WasmVMService/MigrateWithStorage"
	WasmVMService_AnalyzeCode_FullMethodName            = "/cosmwasm.WasmVMService/AnalyzeCode"
	WasmVMService_GetMetrics_FullMethodName             = "/cosmwasm.WasmVMService/GetMetrics"
	WasmVMService_GetPinnedMetrics_FullMethodName       = "/cosmwasm.WasmVMService/GetPinnedMetrics"
	WasmVMService_IbcChannelOpen_FullMethodName         = "/cosmwasm.WasmVMService/IbcChannelOpen"
	WasmVMService_IbcChannelConnect_FullMethodName      = "/cosmwasm.WasmVMService/IbcChannelConnect"
	WasmVMService_IbcChannelClose_FullMethodName        = "/cosmwasm.WasmVMService/IbcChannelClose"
	WasmVMService_IbcPacketReceive_FullMethodName       = "/cosmwasm.WasmVMService/IbcPacketReceive"
	WasmVMService_IbcPacketAck_FullMethodName           = "/cosmwasm.WasmVMService/IbcPacketAck"
	WasmVMService_IbcPacketTimeout_FullMethodName       = "/cosmwasm.WasmVMService/IbcPacketTimeout"
	WasmVMService_IbcSourceCallback_FullMethodName      = "/cosmwasm.WasmVMService/IbcSourceCallback"
	WasmVMService_IbcDestinationCallback_FullMethodName = "/cosmwasm.WasmVMService/IbcDestinationCallback"
	WasmVMService_Ibc2PacketReceive_FullMethodName      = "/cosmwasm.WasmVMService/Ibc2PacketReceive"
	WasmVMService_Ibc2PacketAck_FullMethodName          = "/cosmwasm.WasmVMService/Ibc2PacketAck"
	WasmVMService_Ibc2PacketTimeout_FullMethodName      = "/cosmwasm.WasmVMService/Ibc2PacketTimeout"
	WasmVMService_Ibc2PacketSend_FullMethodName         = "/cosmwasm.WasmVMService/Ibc2PacketSend"
)

// WasmVMServiceClient is the client API for WasmVMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WasmVMService: RPC interface for wasmvm
type WasmVMServiceClient interface {
	// Module lifecycle management
	LoadModule(ctx context.Context, in *LoadModuleRequest, opts ...grpc.CallOption) (*LoadModuleResponse, error)
	RemoveModule(ctx context.Context, in *RemoveModuleRequest, opts ...grpc.CallOption) (*RemoveModuleResponse, error)
	PinModule(ctx context.Context, in *PinModuleRequest, opts ...grpc.CallOption) (*PinModuleResponse, error)
	UnpinModule(ctx context.Context, in *UnpinModuleRequest, opts ...grpc.CallOption) (*UnpinModuleResponse, error)
	GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error)
	// Contract execution calls
	Instantiate(ctx context.Context, in *InstantiateRequest, opts ...grpc.CallOption) (*InstantiateResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Migrate(ctx context.Context, in *MigrateRequest, opts ...grpc.CallOption) (*MigrateResponse, error)
	Sudo(ctx context.Context, in *SudoRequest, opts ...grpc.CallOption) (*SudoResponse, error)
	Reply(ctx context.Context, in *ReplyRequest, opts ...grpc.CallOption) (*ReplyResponse, error)
	// Storage-aware contract execution calls (enhanced versions)
	InstantiateWithStorage(ctx context.Context, in *ExtendedInstantiateRequest, opts ...grpc.CallOption) (*InstantiateResponse, error)
	ExecuteWithStorage(ctx context.Context, in *ExtendedExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	QueryWithStorage(ctx context.Context, in *ExtendedQueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	MigrateWithStorage(ctx context.Context, in *ExtendedMigrateRequest, opts ...grpc.CallOption) (*MigrateResponse, error)
	// Code analysis
	AnalyzeCode(ctx context.Context, in *AnalyzeCodeRequest, opts ...grpc.CallOption) (*AnalyzeCodeResponse, error)
	// Metrics
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetPinnedMetrics(ctx context.Context, in *GetPinnedMetricsRequest, opts ...grpc.CallOption) (*GetPinnedMetricsResponse, error)
	// IBC Entry Points
	// All IBC calls typically share a similar request/response structure
	// with checksum, context, message, gas limit, and request ID.
	// Their responses usually contain data, gas used, and an error.
	IbcChannelOpen(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	IbcChannelConnect(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	IbcChannelClose(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	IbcPacketReceive(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	IbcPacketAck(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	IbcPacketTimeout(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	IbcSourceCallback(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	IbcDestinationCallback(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	Ibc2PacketReceive(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	Ibc2PacketAck(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	Ibc2PacketTimeout(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
	Ibc2PacketSend(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error)
}

type wasmVMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWasmVMServiceClient(cc grpc.ClientConnInterface) WasmVMServiceClient {
	return &wasmVMServiceClient{cc}
}

func (c *wasmVMServiceClient) LoadModule(ctx context.Context, in *LoadModuleRequest, opts ...grpc.CallOption) (*LoadModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadModuleResponse)
	err := c.cc.Invoke(ctx, WasmVMService_LoadModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) RemoveModule(ctx context.Context, in *RemoveModuleRequest, opts ...grpc.CallOption) (*RemoveModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveModuleResponse)
	err := c.cc.Invoke(ctx, WasmVMService_RemoveModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) PinModule(ctx context.Context, in *PinModuleRequest, opts ...grpc.CallOption) (*PinModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinModuleResponse)
	err := c.cc.Invoke(ctx, WasmVMService_PinModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) UnpinModule(ctx context.Context, in *UnpinModuleRequest, opts ...grpc.CallOption) (*UnpinModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpinModuleResponse)
	err := c.cc.Invoke(ctx, WasmVMService_UnpinModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCodeResponse)
	err := c.cc.Invoke(ctx, WasmVMService_GetCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Instantiate(ctx context.Context, in *InstantiateRequest, opts ...grpc.CallOption) (*InstantiateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstantiateResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Instantiate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Migrate(ctx context.Context, in *MigrateRequest, opts ...grpc.CallOption) (*MigrateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MigrateResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Migrate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Sudo(ctx context.Context, in *SudoRequest, opts ...grpc.CallOption) (*SudoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SudoResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Sudo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Reply(ctx context.Context, in *ReplyRequest, opts ...grpc.CallOption) (*ReplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Reply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) InstantiateWithStorage(ctx context.Context, in *ExtendedInstantiateRequest, opts ...grpc.CallOption) (*InstantiateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstantiateResponse)
	err := c.cc.Invoke(ctx, WasmVMService_InstantiateWithStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) ExecuteWithStorage(ctx context.Context, in *ExtendedExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, WasmVMService_ExecuteWithStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) QueryWithStorage(ctx context.Context, in *ExtendedQueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, WasmVMService_QueryWithStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) MigrateWithStorage(ctx context.Context, in *ExtendedMigrateRequest, opts ...grpc.CallOption) (*MigrateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MigrateResponse)
	err := c.cc.Invoke(ctx, WasmVMService_MigrateWithStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) AnalyzeCode(ctx context.Context, in *AnalyzeCodeRequest, opts ...grpc.CallOption) (*AnalyzeCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeCodeResponse)
	err := c.cc.Invoke(ctx, WasmVMService_AnalyzeCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, WasmVMService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) GetPinnedMetrics(ctx context.Context, in *GetPinnedMetricsRequest, opts ...grpc.CallOption) (*GetPinnedMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPinnedMetricsResponse)
	err := c.cc.Invoke(ctx, WasmVMService_GetPinnedMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcChannelOpen(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcChannelOpen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcChannelConnect(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcChannelConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcChannelClose(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcChannelClose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcPacketReceive(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcPacketReceive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcPacketAck(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcPacketAck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcPacketTimeout(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcPacketTimeout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcSourceCallback(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcSourceCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) IbcDestinationCallback(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_IbcDestinationCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Ibc2PacketReceive(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Ibc2PacketReceive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Ibc2PacketAck(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Ibc2PacketAck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Ibc2PacketTimeout(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Ibc2PacketTimeout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasmVMServiceClient) Ibc2PacketSend(ctx context.Context, in *IbcMsgRequest, opts ...grpc.CallOption) (*IbcMsgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IbcMsgResponse)
	err := c.cc.Invoke(ctx, WasmVMService_Ibc2PacketSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WasmVMServiceServer is the server API for WasmVMService service.
// All implementations must embed UnimplementedWasmVMServiceServer
// for forward compatibility.
//
// WasmVMService: RPC interface for wasmvm
type WasmVMServiceServer interface {
	// Module lifecycle management
	LoadModule(context.Context, *LoadModuleRequest) (*LoadModuleResponse, error)
	RemoveModule(context.Context, *RemoveModuleRequest) (*RemoveModuleResponse, error)
	PinModule(context.Context, *PinModuleRequest) (*PinModuleResponse, error)
	UnpinModule(context.Context, *UnpinModuleRequest) (*UnpinModuleResponse, error)
	GetCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error)
	// Contract execution calls
	Instantiate(context.Context, *InstantiateRequest) (*InstantiateResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Migrate(context.Context, *MigrateRequest) (*MigrateResponse, error)
	Sudo(context.Context, *SudoRequest) (*SudoResponse, error)
	Reply(context.Context, *ReplyRequest) (*ReplyResponse, error)
	// Storage-aware contract execution calls (enhanced versions)
	InstantiateWithStorage(context.Context, *ExtendedInstantiateRequest) (*InstantiateResponse, error)
	ExecuteWithStorage(context.Context, *ExtendedExecuteRequest) (*ExecuteResponse, error)
	QueryWithStorage(context.Context, *ExtendedQueryRequest) (*QueryResponse, error)
	MigrateWithStorage(context.Context, *ExtendedMigrateRequest) (*MigrateResponse, error)
	// Code analysis
	AnalyzeCode(context.Context, *AnalyzeCodeRequest) (*AnalyzeCodeResponse, error)
	// Metrics
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetPinnedMetrics(context.Context, *GetPinnedMetricsRequest) (*GetPinnedMetricsResponse, error)
	// IBC Entry Points
	// All IBC calls typically share a similar request/response structure
	// with checksum, context, message, gas limit, and request ID.
	// Their responses usually contain data, gas used, and an error.
	IbcChannelOpen(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	IbcChannelConnect(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	IbcChannelClose(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	IbcPacketReceive(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	IbcPacketAck(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	IbcPacketTimeout(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	IbcSourceCallback(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	IbcDestinationCallback(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	Ibc2PacketReceive(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	Ibc2PacketAck(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	Ibc2PacketTimeout(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	Ibc2PacketSend(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error)
	mustEmbedUnimplementedWasmVMServiceServer()
}

// UnimplementedWasmVMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWasmVMServiceServer struct{}

func (UnimplementedWasmVMServiceServer) LoadModule(context.Context, *LoadModuleRequest) (*LoadModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModule not implemented")
}
func (UnimplementedWasmVMServiceServer) RemoveModule(context.Context, *RemoveModuleRequest) (*RemoveModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveModule not implemented")
}
func (UnimplementedWasmVMServiceServer) PinModule(context.Context, *PinModuleRequest) (*PinModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinModule not implemented")
}
func (UnimplementedWasmVMServiceServer) UnpinModule(context.Context, *UnpinModuleRequest) (*UnpinModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinModule not implemented")
}
func (UnimplementedWasmVMServiceServer) GetCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (UnimplementedWasmVMServiceServer) Instantiate(context.Context, *InstantiateRequest) (*InstantiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instantiate not implemented")
}
func (UnimplementedWasmVMServiceServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedWasmVMServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedWasmVMServiceServer) Migrate(context.Context, *MigrateRequest) (*MigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedWasmVMServiceServer) Sudo(context.Context, *SudoRequest) (*SudoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sudo not implemented")
}
func (UnimplementedWasmVMServiceServer) Reply(context.Context, *ReplyRequest) (*ReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedWasmVMServiceServer) InstantiateWithStorage(context.Context, *ExtendedInstantiateRequest) (*InstantiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantiateWithStorage not implemented")
}
func (UnimplementedWasmVMServiceServer) ExecuteWithStorage(context.Context, *ExtendedExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWithStorage not implemented")
}
func (UnimplementedWasmVMServiceServer) QueryWithStorage(context.Context, *ExtendedQueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithStorage not implemented")
}
func (UnimplementedWasmVMServiceServer) MigrateWithStorage(context.Context, *ExtendedMigrateRequest) (*MigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateWithStorage not implemented")
}
func (UnimplementedWasmVMServiceServer) AnalyzeCode(context.Context, *AnalyzeCodeRequest) (*AnalyzeCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeCode not implemented")
}
func (UnimplementedWasmVMServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedWasmVMServiceServer) GetPinnedMetrics(context.Context, *GetPinnedMetricsRequest) (*GetPinnedMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedMetrics not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcChannelOpen(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcChannelOpen not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcChannelConnect(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcChannelConnect not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcChannelClose(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcChannelClose not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcPacketReceive(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcPacketReceive not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcPacketAck(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcPacketAck not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcPacketTimeout(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcPacketTimeout not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcSourceCallback(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcSourceCallback not implemented")
}
func (UnimplementedWasmVMServiceServer) IbcDestinationCallback(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcDestinationCallback not implemented")
}
func (UnimplementedWasmVMServiceServer) Ibc2PacketReceive(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ibc2PacketReceive not implemented")
}
func (UnimplementedWasmVMServiceServer) Ibc2PacketAck(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ibc2PacketAck not implemented")
}
func (UnimplementedWasmVMServiceServer) Ibc2PacketTimeout(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ibc2PacketTimeout not implemented")
}
func (UnimplementedWasmVMServiceServer) Ibc2PacketSend(context.Context, *IbcMsgRequest) (*IbcMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ibc2PacketSend not implemented")
}
func (UnimplementedWasmVMServiceServer) mustEmbedUnimplementedWasmVMServiceServer() {}
func (UnimplementedWasmVMServiceServer) testEmbeddedByValue()                       {}

// UnsafeWasmVMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WasmVMServiceServer will
// result in compilation errors.
type UnsafeWasmVMServiceServer interface {
	mustEmbedUnimplementedWasmVMServiceServer()
}

func RegisterWasmVMServiceServer(s grpc.ServiceRegistrar, srv WasmVMServiceServer) {
	// If the following call pancis, it indicates UnimplementedWasmVMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WasmVMService_ServiceDesc, srv)
}

func _WasmVMService_LoadModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).LoadModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_LoadModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).LoadModule(ctx, req.(*LoadModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_RemoveModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).RemoveModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_RemoveModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).RemoveModule(ctx, req.(*RemoveModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_PinModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).PinModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_PinModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).PinModule(ctx, req.(*PinModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_UnpinModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).UnpinModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_UnpinModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).UnpinModule(ctx, req.(*UnpinModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_GetCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).GetCode(ctx, req.(*GetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Instantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstantiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Instantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Instantiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Instantiate(ctx, req.(*InstantiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Migrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Migrate(ctx, req.(*MigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Sudo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Sudo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Sudo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Sudo(ctx, req.(*SudoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Reply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Reply(ctx, req.(*ReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_InstantiateWithStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendedInstantiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).InstantiateWithStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_InstantiateWithStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).InstantiateWithStorage(ctx, req.(*ExtendedInstantiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_ExecuteWithStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendedExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).ExecuteWithStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_ExecuteWithStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).ExecuteWithStorage(ctx, req.(*ExtendedExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_QueryWithStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).QueryWithStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_QueryWithStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).QueryWithStorage(ctx, req.(*ExtendedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_MigrateWithStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendedMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).MigrateWithStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_MigrateWithStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).MigrateWithStorage(ctx, req.(*ExtendedMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_AnalyzeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).AnalyzeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_AnalyzeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).AnalyzeCode(ctx, req.(*AnalyzeCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_GetPinnedMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPinnedMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).GetPinnedMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_GetPinnedMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).GetPinnedMetrics(ctx, req.(*GetPinnedMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcChannelOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcChannelOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcChannelOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcChannelOpen(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcChannelConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcChannelConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcChannelConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcChannelConnect(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcChannelClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcChannelClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcChannelClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcChannelClose(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcPacketReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcPacketReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcPacketReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcPacketReceive(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcPacketAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcPacketAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcPacketAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcPacketAck(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcPacketTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcPacketTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcPacketTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcPacketTimeout(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcSourceCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcSourceCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcSourceCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcSourceCallback(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_IbcDestinationCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).IbcDestinationCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_IbcDestinationCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).IbcDestinationCallback(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Ibc2PacketReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Ibc2PacketReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Ibc2PacketReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Ibc2PacketReceive(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Ibc2PacketAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Ibc2PacketAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Ibc2PacketAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Ibc2PacketAck(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Ibc2PacketTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Ibc2PacketTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Ibc2PacketTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Ibc2PacketTimeout(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasmVMService_Ibc2PacketSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbcMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasmVMServiceServer).Ibc2PacketSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WasmVMService_Ibc2PacketSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasmVMServiceServer).Ibc2PacketSend(ctx, req.(*IbcMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WasmVMService_ServiceDesc is the grpc.ServiceDesc for WasmVMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WasmVMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmwasm.WasmVMService",
	HandlerType: (*WasmVMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadModule",
			Handler:    _WasmVMService_LoadModule_Handler,
		},
		{
			MethodName: "RemoveModule",
			Handler:    _WasmVMService_RemoveModule_Handler,
		},
		{
			MethodName: "PinModule",
			Handler:    _WasmVMService_PinModule_Handler,
		},
		{
			MethodName: "UnpinModule",
			Handler:    _WasmVMService_UnpinModule_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _WasmVMService_GetCode_Handler,
		},
		{
			MethodName: "Instantiate",
			Handler:    _WasmVMService_Instantiate_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _WasmVMService_Execute_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _WasmVMService_Query_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _WasmVMService_Migrate_Handler,
		},
		{
			MethodName: "Sudo",
			Handler:    _WasmVMService_Sudo_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _WasmVMService_Reply_Handler,
		},
		{
			MethodName: "InstantiateWithStorage",
			Handler:    _WasmVMService_InstantiateWithStorage_Handler,
		},
		{
			MethodName: "ExecuteWithStorage",
			Handler:    _WasmVMService_ExecuteWithStorage_Handler,
		},
		{
			MethodName: "QueryWithStorage",
			Handler:    _WasmVMService_QueryWithStorage_Handler,
		},
		{
			MethodName: "MigrateWithStorage",
			Handler:    _WasmVMService_MigrateWithStorage_Handler,
		},
		{
			MethodName: "AnalyzeCode",
			Handler:    _WasmVMService_AnalyzeCode_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _WasmVMService_GetMetrics_Handler,
		},
		{
			MethodName: "GetPinnedMetrics",
			Handler:    _WasmVMService_GetPinnedMetrics_Handler,
		},
		{
			MethodName: "IbcChannelOpen",
			Handler:    _WasmVMService_IbcChannelOpen_Handler,
		},
		{
			MethodName: "IbcChannelConnect",
			Handler:    _WasmVMService_IbcChannelConnect_Handler,
		},
		{
			MethodName: "IbcChannelClose",
			Handler:    _WasmVMService_IbcChannelClose_Handler,
		},
		{
			MethodName: "IbcPacketReceive",
			Handler:    _WasmVMService_IbcPacketReceive_Handler,
		},
		{
			MethodName: "IbcPacketAck",
			Handler:    _WasmVMService_IbcPacketAck_Handler,
		},
		{
			MethodName: "IbcPacketTimeout",
			Handler:    _WasmVMService_IbcPacketTimeout_Handler,
		},
		{
			MethodName: "IbcSourceCallback",
			Handler:    _WasmVMService_IbcSourceCallback_Handler,
		},
		{
			MethodName: "IbcDestinationCallback",
			Handler:    _WasmVMService_IbcDestinationCallback_Handler,
		},
		{
			MethodName: "Ibc2PacketReceive",
			Handler:    _WasmVMService_Ibc2PacketReceive_Handler,
		},
		{
			MethodName: "Ibc2PacketAck",
			Handler:    _WasmVMService_Ibc2PacketAck_Handler,
		},
		{
			MethodName: "Ibc2PacketTimeout",
			Handler:    _WasmVMService_Ibc2PacketTimeout_Handler,
		},
		{
			MethodName: "Ibc2PacketSend",
			Handler:    _WasmVMService_Ibc2PacketSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wasmvm.proto",
}

const (
	HostService_CallHostFunction_FullMethodName       = "/cosmwasm.HostService/CallHostFunction"
	HostService_StorageGet_FullMethodName             = "/cosmwasm.HostService/StorageGet"
	HostService_StorageSet_FullMethodName             = "/cosmwasm.HostService/StorageSet"
	HostService_StorageDelete_FullMethodName          = "/cosmwasm.HostService/StorageDelete"
	HostService_StorageIterator_FullMethodName        = "/cosmwasm.HostService/StorageIterator"
	HostService_StorageReverseIterator_FullMethodName = "/cosmwasm.HostService/StorageReverseIterator"
	HostService_QueryChain_FullMethodName             = "/cosmwasm.HostService/QueryChain"
	HostService_HumanizeAddress_FullMethodName        = "/cosmwasm.HostService/HumanizeAddress"
	HostService_CanonicalizeAddress_FullMethodName    = "/cosmwasm.HostService/CanonicalizeAddress"
	HostService_ConsumeGas_FullMethodName             = "/cosmwasm.HostService/ConsumeGas"
	HostService_GetGasRemaining_FullMethodName        = "/cosmwasm.HostService/GetGasRemaining"
)

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HostService: Enhanced RPC interface for host function callbacks
// This service is called by the VM to interact with storage, query chain state,
// and use other host-provided functionality
type HostServiceClient interface {
	// Legacy generic host function call
	CallHostFunction(ctx context.Context, in *CallHostFunctionRequest, opts ...grpc.CallOption) (*CallHostFunctionResponse, error)
	// Storage operations
	StorageGet(ctx context.Context, in *StorageGetRequest, opts ...grpc.CallOption) (*StorageGetResponse, error)
	StorageSet(ctx context.Context, in *StorageSetRequest, opts ...grpc.CallOption) (*StorageSetResponse, error)
	StorageDelete(ctx context.Context, in *StorageDeleteRequest, opts ...grpc.CallOption) (*StorageDeleteResponse, error)
	StorageIterator(ctx context.Context, in *StorageIteratorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageIteratorResponse], error)
	StorageReverseIterator(ctx context.Context, in *StorageReverseIteratorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageReverseIteratorResponse], error)
	// Query operations
	QueryChain(ctx context.Context, in *QueryChainRequest, opts ...grpc.CallOption) (*QueryChainResponse, error)
	// GoAPI operations
	HumanizeAddress(ctx context.Context, in *HumanizeAddressRequest, opts ...grpc.CallOption) (*HumanizeAddressResponse, error)
	CanonicalizeAddress(ctx context.Context, in *CanonicalizeAddressRequest, opts ...grpc.CallOption) (*CanonicalizeAddressResponse, error)
	// Gas meter operations
	ConsumeGas(ctx context.Context, in *ConsumeGasRequest, opts ...grpc.CallOption) (*ConsumeGasResponse, error)
	GetGasRemaining(ctx context.Context, in *GetGasRemainingRequest, opts ...grpc.CallOption) (*GetGasRemainingResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) CallHostFunction(ctx context.Context, in *CallHostFunctionRequest, opts ...grpc.CallOption) (*CallHostFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallHostFunctionResponse)
	err := c.cc.Invoke(ctx, HostService_CallHostFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) StorageGet(ctx context.Context, in *StorageGetRequest, opts ...grpc.CallOption) (*StorageGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageGetResponse)
	err := c.cc.Invoke(ctx, HostService_StorageGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) StorageSet(ctx context.Context, in *StorageSetRequest, opts ...grpc.CallOption) (*StorageSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageSetResponse)
	err := c.cc.Invoke(ctx, HostService_StorageSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) StorageDelete(ctx context.Context, in *StorageDeleteRequest, opts ...grpc.CallOption) (*StorageDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageDeleteResponse)
	err := c.cc.Invoke(ctx, HostService_StorageDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) StorageIterator(ctx context.Context, in *StorageIteratorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageIteratorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HostService_ServiceDesc.Streams[0], HostService_StorageIterator_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StorageIteratorRequest, StorageIteratorResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostService_StorageIteratorClient = grpc.ServerStreamingClient[StorageIteratorResponse]

func (c *hostServiceClient) StorageReverseIterator(ctx context.Context, in *StorageReverseIteratorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageReverseIteratorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HostService_ServiceDesc.Streams[1], HostService_StorageReverseIterator_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StorageReverseIteratorRequest, StorageReverseIteratorResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostService_StorageReverseIteratorClient = grpc.ServerStreamingClient[StorageReverseIteratorResponse]

func (c *hostServiceClient) QueryChain(ctx context.Context, in *QueryChainRequest, opts ...grpc.CallOption) (*QueryChainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryChainResponse)
	err := c.cc.Invoke(ctx, HostService_QueryChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) HumanizeAddress(ctx context.Context, in *HumanizeAddressRequest, opts ...grpc.CallOption) (*HumanizeAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HumanizeAddressResponse)
	err := c.cc.Invoke(ctx, HostService_HumanizeAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) CanonicalizeAddress(ctx context.Context, in *CanonicalizeAddressRequest, opts ...grpc.CallOption) (*CanonicalizeAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanonicalizeAddressResponse)
	err := c.cc.Invoke(ctx, HostService_CanonicalizeAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ConsumeGas(ctx context.Context, in *ConsumeGasRequest, opts ...grpc.CallOption) (*ConsumeGasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeGasResponse)
	err := c.cc.Invoke(ctx, HostService_ConsumeGas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetGasRemaining(ctx context.Context, in *GetGasRemainingRequest, opts ...grpc.CallOption) (*GetGasRemainingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGasRemainingResponse)
	err := c.cc.Invoke(ctx, HostService_GetGasRemaining_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations must embed UnimplementedHostServiceServer
// for forward compatibility.
//
// HostService: Enhanced RPC interface for host function callbacks
// This service is called by the VM to interact with storage, query chain state,
// and use other host-provided functionality
type HostServiceServer interface {
	// Legacy generic host function call
	CallHostFunction(context.Context, *CallHostFunctionRequest) (*CallHostFunctionResponse, error)
	// Storage operations
	StorageGet(context.Context, *StorageGetRequest) (*StorageGetResponse, error)
	StorageSet(context.Context, *StorageSetRequest) (*StorageSetResponse, error)
	StorageDelete(context.Context, *StorageDeleteRequest) (*StorageDeleteResponse, error)
	StorageIterator(*StorageIteratorRequest, grpc.ServerStreamingServer[StorageIteratorResponse]) error
	StorageReverseIterator(*StorageReverseIteratorRequest, grpc.ServerStreamingServer[StorageReverseIteratorResponse]) error
	// Query operations
	QueryChain(context.Context, *QueryChainRequest) (*QueryChainResponse, error)
	// GoAPI operations
	HumanizeAddress(context.Context, *HumanizeAddressRequest) (*HumanizeAddressResponse, error)
	CanonicalizeAddress(context.Context, *CanonicalizeAddressRequest) (*CanonicalizeAddressResponse, error)
	// Gas meter operations
	ConsumeGas(context.Context, *ConsumeGasRequest) (*ConsumeGasResponse, error)
	GetGasRemaining(context.Context, *GetGasRemainingRequest) (*GetGasRemainingResponse, error)
	mustEmbedUnimplementedHostServiceServer()
}

// UnimplementedHostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostServiceServer struct{}

func (UnimplementedHostServiceServer) CallHostFunction(context.Context, *CallHostFunctionRequest) (*CallHostFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallHostFunction not implemented")
}
func (UnimplementedHostServiceServer) StorageGet(context.Context, *StorageGetRequest) (*StorageGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageGet not implemented")
}
func (UnimplementedHostServiceServer) StorageSet(context.Context, *StorageSetRequest) (*StorageSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageSet not implemented")
}
func (UnimplementedHostServiceServer) StorageDelete(context.Context, *StorageDeleteRequest) (*StorageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageDelete not implemented")
}
func (UnimplementedHostServiceServer) StorageIterator(*StorageIteratorRequest, grpc.ServerStreamingServer[StorageIteratorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StorageIterator not implemented")
}
func (UnimplementedHostServiceServer) StorageReverseIterator(*StorageReverseIteratorRequest, grpc.ServerStreamingServer[StorageReverseIteratorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StorageReverseIterator not implemented")
}
func (UnimplementedHostServiceServer) QueryChain(context.Context, *QueryChainRequest) (*QueryChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChain not implemented")
}
func (UnimplementedHostServiceServer) HumanizeAddress(context.Context, *HumanizeAddressRequest) (*HumanizeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HumanizeAddress not implemented")
}
func (UnimplementedHostServiceServer) CanonicalizeAddress(context.Context, *CanonicalizeAddressRequest) (*CanonicalizeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanonicalizeAddress not implemented")
}
func (UnimplementedHostServiceServer) ConsumeGas(context.Context, *ConsumeGasRequest) (*ConsumeGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeGas not implemented")
}
func (UnimplementedHostServiceServer) GetGasRemaining(context.Context, *GetGasRemainingRequest) (*GetGasRemainingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasRemaining not implemented")
}
func (UnimplementedHostServiceServer) mustEmbedUnimplementedHostServiceServer() {}
func (UnimplementedHostServiceServer) testEmbeddedByValue()                     {}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	// If the following call pancis, it indicates UnimplementedHostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_CallHostFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallHostFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).CallHostFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_CallHostFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).CallHostFunction(ctx, req.(*CallHostFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_StorageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).StorageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_StorageGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).StorageGet(ctx, req.(*StorageGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_StorageSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).StorageSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_StorageSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).StorageSet(ctx, req.(*StorageSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_StorageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).StorageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_StorageDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).StorageDelete(ctx, req.(*StorageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_StorageIterator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageIteratorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServiceServer).StorageIterator(m, &grpc.GenericServerStream[StorageIteratorRequest, StorageIteratorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostService_StorageIteratorServer = grpc.ServerStreamingServer[StorageIteratorResponse]

func _HostService_StorageReverseIterator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageReverseIteratorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServiceServer).StorageReverseIterator(m, &grpc.GenericServerStream[StorageReverseIteratorRequest, StorageReverseIteratorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HostService_StorageReverseIteratorServer = grpc.ServerStreamingServer[StorageReverseIteratorResponse]

func _HostService_QueryChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).QueryChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_QueryChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).QueryChain(ctx, req.(*QueryChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_HumanizeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanizeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).HumanizeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_HumanizeAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).HumanizeAddress(ctx, req.(*HumanizeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_CanonicalizeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanonicalizeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).CanonicalizeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_CanonicalizeAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).CanonicalizeAddress(ctx, req.(*CanonicalizeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ConsumeGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ConsumeGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_ConsumeGas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ConsumeGas(ctx, req.(*ConsumeGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetGasRemaining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasRemainingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetGasRemaining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetGasRemaining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetGasRemaining(ctx, req.(*GetGasRemainingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmwasm.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallHostFunction",
			Handler:    _HostService_CallHostFunction_Handler,
		},
		{
			MethodName: "StorageGet",
			Handler:    _HostService_StorageGet_Handler,
		},
		{
			MethodName: "StorageSet",
			Handler:    _HostService_StorageSet_Handler,
		},
		{
			MethodName: "StorageDelete",
			Handler:    _HostService_StorageDelete_Handler,
		},
		{
			MethodName: "QueryChain",
			Handler:    _HostService_QueryChain_Handler,
		},
		{
			MethodName: "HumanizeAddress",
			Handler:    _HostService_HumanizeAddress_Handler,
		},
		{
			MethodName: "CanonicalizeAddress",
			Handler:    _HostService_CanonicalizeAddress_Handler,
		},
		{
			MethodName: "ConsumeGas",
			Handler:    _HostService_ConsumeGas_Handler,
		},
		{
			MethodName: "GetGasRemaining",
			Handler:    _HostService_GetGasRemaining_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StorageIterator",
			Handler:       _HostService_StorageIterator_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StorageReverseIterator",
			Handler:       _HostService_StorageReverseIterator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wasmvm.proto",
}
